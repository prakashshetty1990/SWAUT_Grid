package com.sun.pages;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Set;

import org.junit.Assert;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.FindFailed;
import org.sikuli.script.Match;
import org.sikuli.script.Screen;

import com.sun.commons.Application;
import com.sun.framework.Status;
import com.sun.utils.DataTable;
import com.sun.utils.SeleniumReport;
import com.sun.utils.TestSettings;




/**
 * Base class for all the pages.
 *
 */
public abstract class Page {
	protected WebDriver browser;
	protected SeleniumReport report;
	public Application application;	
	protected DataTable dataTable;	
	protected abstract boolean isValidPage();

	protected abstract void waitForPageLoad();

	/**
	 * Constructor for Page class 
	 * @param browser
	 * @param report
	 */
	protected Page(WebDriver browser,SeleniumReport report) {
		this.browser=browser;
		this.report=report;
		PageFactory.initElements(browser, this);
		waitForPageLoad();
		verifyApplicationInCorrectPage();
	}

	/**
	 * Verify Application in Correct Page. 
	 * @param Nil 
	 * @return Nil
	 */	

	private void verifyApplicationInCorrectPage() {
		if (!isValidPage()) {
			String stepName="Navigation to Page";
			String message="The application is not in the expected page , current page: " + 
					browser.getTitle() +" Page.";
			report.reportFailEvent(stepName, message);			
		}
	}
	
	public String sikuliImagePath(){
		if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
			return "Images/iexplore/";
		}else if((new TestSettings()).getBrowser().equalsIgnoreCase("firefox")){
			return "Images/firefox/";
		}else if((new TestSettings()).getBrowser().equalsIgnoreCase("safari")){
			return "Images/firefox/";
		}else{
			return "Images/iexplore/";
		}
	}
	
	public boolean isImagePresent(String strImagePath){		
		try {					
			Screen s=new Screen();					
			s.find(strImagePath);				
			return true;
		} catch (FindFailed e) {
			return false;
		}		
	}

	/**
	 * Verify link inside an HTML element. 
	 * @param element HTML element in which link need to search 
	 * @return linkText text of the link need to verify
	 */
	protected void verifyLinksInSection(WebElement element, String linkText, String stepName) {
		try {
			Assert.assertTrue(element.findElement(By.linkText(linkText))
					.isDisplayed());
			report.reportPassEvent(stepName, "Verify Link with link text: " + linkText);
		} catch (RuntimeException ex) {
			report.reportFailEvent(stepName, "Verify Link with link text: " + linkText);
		}
	}

	/**
	 * Check if the element is present in the page
	 * @param element WebElement need to check
	 * @return True if present
	 */
	protected boolean isElementPresent(WebElement element){
		try{
			return element.isDisplayed();
		}catch(NoSuchElementException ex){
			return false;
		}catch(StaleElementReferenceException ex2){
			return false;
		}
	}

	/**
	 * Check if the element is present in the page by size
	 * @param element WebElement need to check
	 * @return True if present
	 */

	protected boolean isElementDisplayedBySize(By element){
		try{
			if((browser.findElement(element).getSize().height)>0){
				return true;
			}else{
				return false;
			}
		}catch(Exception Ex){
			return false;
		}
	}

	/**
	 * Check if the element is present in the page
	 * @param element WebElement need to check
	 * @return True if present
	 */
	public boolean isElementPresent(By by){
		try{
			return browser.findElement(by).isDisplayed();
		}catch(NoSuchElementException ex){
			return false;
		}catch(StaleElementReferenceException ex2){
			return false;
		}
	}


	/**
	 * Check if the element is present in the page and report error
	 * @param element
	 * @param errorMsg error message need to report if the element not present
	 */
	protected void isElementPresent(WebElement element,String stepName,String errorMsg) {
		if(!isElementPresent(element)){
			report.reportFailEvent(stepName, errorMsg);
		}
	}

	/**
	 * Check if the element is present in the page and report error
	 * @param element
	 * @param errorMsg error message need to report if the element not present
	 */
	protected void checkElementPresent(WebElement element,String value) {
		if(isElementPresent(element)){
			report.reportPassEvent("IsElementPresent:"+value, "Element is present");
			report.updateTestLog("IsElementPresent:"+value, "Element is present",Status.SCREENSHOT);
		}else{
			report.updateTestLog("IsElementPresent:"+value, "Element is not present",Status.FAIL);
			report.updateTestLog("IsElementPresent:"+value, "Element is not present",Status.SCREENSHOT);
		}
	}
	//*****************************************************************************************************************//
	//Button
	//*****************************************************************************************************************//


	/***
	 * Method to click on a link(WebElement button)
	 * @param : Element Name
	 ***/
	public void clickOnButton(WebElement button) {
		String btn=button.getText();
		try{
			waitForElement(button);

			if (isElementPresent(button)){
				button.click();
				report.reportDoneEvent("ClickOn"+btn, "Successfully clicked on button "+btn);
			}}
		catch (RuntimeException ex) {
			report.reportDoneEvent("Click"+btn,btn+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 
	}

	/**
	 * Method to click on a button(WebElement button)
	 * @param : Element Name
	 */
	protected void jsClickButton(WebElement button) {
		String btnText=button.getText();
		try{
			if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
				((JavascriptExecutor) browser).executeScript("arguments[0].click();",button);
				report.reportDoneEvent("ClickOnButton"+btnText, "Successfully clicked on button "+btnText);
			}else{
				button.click();
			}
		}
		catch (RuntimeException ex) {
			report.reportDoneEvent("Click"+btnText, btnText+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 
	}
	
	
	public void clickManyTimes(WebElement we){
		while(isElementPresent(we)){			
			we.click();
			sleep(2000);
			System.out.println("Clicked");
		}
	}

	//*****************************************************************************************************************//
	//TextBox
	//*****************************************************************************************************************//
	/***
	 * Method to enter text in a textbox
	 * 
	 * @param : Element Name
	 * @return :
	 ***/
	public void enterText(WebElement element,String text){
		try{
			waitForElement(element);
			if(isElementPresent(element)){
				element.clear();
				element.sendKeys(text);
				report.reportDoneEvent("Enter :"+text, "Successfully entered "+text);
			}
		}
		catch (RuntimeException ex) {
			report.updateTestLog("Enter :"+text, "NOT able to enter text ",Status.SCREENSHOT);
			report.updateTestLog("Enter :"+text, "NOT able to enter text, EXCEPTION CAUGHT : "+ex.getMessage(),Status.FAIL);
		} 
	}

	/***
	 * Method to clear text in a textbox
	 * 
	 * @param : Element Name
	 * @return :
	 ***/
	public void clearText(WebElement element){
		try{
			waitForElement(element);
			if(isElementPresent(element)){
				element.clear();
				report.reportDoneEvent("Clear"+element.getText().trim(), "Successfully cleared text in "+element.getText().trim());
			}
		}catch(RuntimeException ex){
			report.updateTestLog("UnableToClearText","Unable to clear text, EXCEPTION CAUGHT : "+ex.getMessage(),Status.FAIL);
		}
	}

	/***
	 * Method to verify textbox is displayed
	 * 
	 * @param : Element Name
	 * @return :
	 ***/
	public void verifyTextBox(WebElement element){
		try{
			waitForElement(element);
			if(isElementPresent(element)){
				report.reportPassEvent("VerifyTextBoxPresence", "TextBox is displayed"); 				
			}
		}catch(RuntimeException ex){ 			
			report.reportFailEvent("VerifyTextBoxPresence","TextBox is not displayed"); 			 
		}
	}
	//*****************************************************************************************************************//
	//Links
	//*****************************************************************************************************************//
	/***
	 * Method to click on a link(WebElement link)
	 * @param : Element Name
	 ***/

	public void clickOnLink(WebElement link) { 		
		try{
			waitForElement(link);
			String linkText=link.getText();
			if(isElementPresent(link)){ 				
				link.click();
				report.reportDoneEvent("ClickOn"+linkText, "Successfully clicked on link "+linkText);
			}
		}catch (Exception ex) {
			report.reportFailEvent("Click√ñnLink", "Link is not displayed, EXCEPTION CAUGHT : "+ex.getMessage());
		} 
	}

	/**
	 * Method to click on a link(WebElement link)
	 * @param : Element Name
	 */
	protected void jsClickLink(WebElement link) {
		String linkText=link.getText();
		try{
			if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
				((JavascriptExecutor) browser).executeScript("arguments[0].click();",link);
				report.reportDoneEvent("ClickOn"+linkText, "Successfully clicked on link "+link.getText().trim());
			}else{
				link.click();
			}
		}
		catch (RuntimeException ex) {
			report.reportDoneEvent("Click"+linkText, linkText+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 
	}

	public void clickOnElement(WebElement element,String reportStep){

		try{ 

			element.click();

			report.reportDoneEvent(reportStep, "Clicked on element successfully"); 

		}catch (RuntimeException ex) {

			report.reportFailEvent(reportStep, "Element is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());

		} 

	}

	/**
	 * Method to click on a link(WebElement link)
	 * @param : Element Name
	 */
	protected void jsClick(WebElement link) {		
		try{
			String linkText=link.getText().trim();
			if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
				((JavascriptExecutor) browser).executeScript("arguments[0].click();",link);
			}
			//else if((new TestSettings()).getBrowser().equalsIgnoreCase("chrome")){
			else{
				link.click();
			}
		}catch (RuntimeException ex) {
			report.reportFailEvent("ClickOnLink", "Unable to click on Link ->"+ex.getMessage());
		}	
	}

	/***
	 * Method to switch to child window
	 * @param : parentWindow
	 ***/
	public void navigatoToWindow(String parentWindow,String pageName) {
		try{
			sleep(5000);
			Set<String> handles = browser.getWindowHandles();
			sleep(2000);
			for (String windowHandle : handles) {
				if (!windowHandle.equals(parentWindow)) {
					browser.switchTo().window(windowHandle);
					browser.manage().window().maximize();
					sleep(5000);				
					report.updateTestLog("NavigateTo"+pageName, "Successfully navigated to "+pageName+" page", Status.SCREENSHOT);
					break;
				}
			}
		}
		catch(RuntimeException ex){
			report.updateTestLog("NavigateTo"+pageName, "Not able to navigate to "+pageName+" Exception caught :"+ex.getMessage(), Status.FAIL);
		}
	}

	/***
	 * Method to switch to child window
	 * @param : parentWindow
	 ***/
	public void closeParentWindowNavigateToChildWindow(String parentWindow,String pageName) {
		try{
			sleep(5000);
			Set<String> handles = browser.getWindowHandles();
			browser.close();
			sleep(2000);
			for (String windowHandle : handles) {
				if (!windowHandle.equals(parentWindow)) {
					browser.switchTo().window(windowHandle);
					browser.manage().window().maximize();
					sleep(5000);
					report.reportPassEvent("NavigateTo"+pageName, "Successfully navigated to "+pageName+" page");				
					break;
				}
			}
		}
		catch(RuntimeException ex){
			report.updateTestLog("NavigateTo"+pageName, "Not able to navigate to "+pageName+" Exception caught :"+ex.getMessage(), Status.FAIL);
		}
	}

	/***
	 * Method to switch to parent window
	 * @param : parentWindow
	 ***/
	public void navigatoToParentWindow(String parentWindow) {
		browser.switchTo().window(parentWindow);
	}
	
	public void moveToElement(WebElement elem){
		if((new TestSettings()).getBrowser().equalsIgnoreCase("safari")){
			String mouseOverScript = "if(document.createEvent){var evObj = document.createEvent('MouseEvents');evObj.initEvent('mouseover', true, false); arguments[0].dispatchEvent(evObj);} else if(document.createEventObject) { arguments[0].fireEvent('onmouseover');}";
			JavascriptExecutor js = (JavascriptExecutor) browser;
			js.executeScript(mouseOverScript, elem);
		}else{
		try{
			Actions act =new Actions(browser);
			act.moveToElement(elem).build().perform();
		}catch(Exception Ex){
			report.reportFailEvent("MovetoElement", "Unable to move to element");
		}
		}
	}

	/***
	 * Method to close a webpage
	 * @return      : 
	 ***/
	public void closeCurrentPage(){
		String str=browser.getTitle();
		try {
			browser.close();
			Set<String> windows=browser.getWindowHandles();
			for(String window:windows){

				browser.switchTo().window(window);
			}
			sleep(5000);
			report.reportDoneEvent("ClosingThe"+str+"Page", str+"page is closed");
		} catch (Exception e) {
			report.reportFailEvent("ClosingThe"+str+"Page", str+"page is not closed: "+e);
		}


	}

	protected void clickMainMenuItem(WebElement menuHeaderItem) {
		try{
			isElementPresent(menuHeaderItem, "verify if Main menu item "+menuHeaderItem.getText().trim()+" is displayed", menuHeaderItem.getText().trim()+" item is NOT displayed");
			menuHeaderItem.click();
			report.reportDoneEvent("clickMainMenuItem", menuHeaderItem.getText().trim()+" clicked successfully.");
		}catch (RuntimeException ex) {
			report.reportFailEvent("clickMainMenuItem", menuHeaderItem.getText().trim()+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 				
	}

	/**
	 * Method to click sub Header navigation drop down items displayed after clicking Menu Items
	 * @param subMenuItem
	 */
	protected void clickSubMenuItem(WebElement subMenuItem) {
		try{
			isElementPresent(subMenuItem, "verify if sub menu item "+subMenuItem.getText().trim()+" is displayed", subMenuItem.getText().trim()+" item is NOT displayed");
			subMenuItem.click();
			report.reportDoneEvent("clickSubMenuItem", subMenuItem.getText().trim()+" clicked successfully.");
		}catch (RuntimeException ex) {
			report.reportFailEvent("clickSubMenuItem", subMenuItem.getText().trim()+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 	
	}

	/**
	 * Method to navigate to products or Bundles & Deals pages
	 * @param menuHeaderItem
	 * @param subMenuItem
	 */
	protected void navigateTo(WebElement menuHeaderItem, WebElement subMenuItem) {
		if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
			Actions builder = new Actions(browser); 
			builder.moveToElement(menuHeaderItem).build().perform(); 
			((JavascriptExecutor) browser).executeScript("arguments[0].click();",subMenuItem);
		}
		else{
			clickMainMenuItem(menuHeaderItem);
			sleep(1000);
			clickSubMenuItem(subMenuItem);			 
		}		
	}

	/**
	 * Method to navigate to products or Bundles & Deals pages
	 * @param menuHeaderItem
	 * @param subMenuItem
	 */
	protected void doubleClick(WebElement element) {
		try{
			if((new TestSettings()).getBrowser().equalsIgnoreCase("iexplore")){
				Actions builder = new Actions(browser); 
				builder.doubleClick(element).build().perform(); 

				report.reportDoneEvent("ClickOn"+element.getText().trim(), "Successfully clicked on "+element.getText().trim());
			}else{
				element.click();
				report.reportDoneEvent("ClickOn"+element.getText().trim(), "Successfully clicked on "+element.getText().trim());
			}
		}

		catch (RuntimeException ex) {
			report.reportDoneEvent("Click"+element.getText().trim(), element.getText().trim()+" is NOT clicked successfully, EXCEPTION CAUGHT : "+ex.getMessage());
		} 
	}



	//*****************************************************************************************************************//
	//Alert pop ups
	//*****************************************************************************************************************//
	/***
	 * Method to accept and close alert and return the text within the alert
	 * 
	 * @param : 
	 * @return :
	 ***/
	public String closeAlertAndReturnText(){
		String alertMessage=null;
		try{		
			WebDriverWait wait = new WebDriverWait(browser, 40);
			wait.until(ExpectedConditions.alertIsPresent());
			Alert alert = browser.switchTo().alert();
			alertMessage=alert.getText();
			report.reportPassEvent("alertMessage", "alertMessage displayed is->"+alertMessage);
			alert.accept();
		}catch(Exception Ex){
			report.reportFailEvent("Exception Caught", "Message is->"+Ex.getMessage());
		}
		return alertMessage;
	}



	//*****************************************************************************************************************//
	//waits
	//*****************************************************************************************************************//

	/**
	 * Method to wait for element to load in the page
	 * @param WebElement
	 */
	protected Boolean waitForElement(By by) {
		try {
			new WebDriverWait(browser,90).
			until(ExpectedConditions.presenceOfElementLocated(by));
		} catch (Exception ex) {
			return false;
		}
		return true;
	}
	

	protected void waitForNewSecondWindow() {
		try{      
			int count=0;
			Set<String> windows = browser.getWindowHandles();      
			while(count<40){
				windows = browser.getWindowHandles();
				if(windows.size()>1){
					report.reportPassEvent("VerifyNewWindowOpened", "New Window opened successfully");
					break;
				}else{
					sleep(2000);
					count++;
				}
			}
			if(count>=40){
				report.reportFailEvent("VerifyNewWindowOpened", "New Window not opened");
			}
		}catch(Exception Ex){    
			report.reportFailEvent("VerifyNewWindowOpened", "New Window not opened");
		}
	}


	/**
	 * Method to wait for element to load in the page
	 * @param WebElement
	 */

	protected Boolean waitForElement(WebElement we) {
		try {
			new WebDriverWait(browser, 30).until(ExpectedConditions
					.visibilityOf(we));
			return true;
		} catch (RuntimeException ex) {
			return false;
		}    	
	}

	/**
	 * Method to wait for Alert present in the page
	 * @param 
	 */

	protected Boolean waitForAlert(){
		try{
			new WebDriverWait(browser, 60).until(ExpectedConditions.alertIsPresent());
			return true;
		}catch(Exception Ex){
			return false;
		}
	}

	/**
	 * Method to check timed out exception
	 * @param Nil
	 */

	protected void waitForApplicationSessionTimeOut(){
		try{
			sleep(1800);
			new WebDriverWait(browser, 300).until(ExpectedConditions
					.elementToBeClickable(By.cssSelector("#overlay-service-switch > div.overlay-body > div.overlay-content > div.overlay-content-bottom")));
			report.reportDoneEvent("waitForApplicationSessionTimeOut", "SessionTimeOut Overlay displayed successfully");
		} catch(RuntimeException e) {
			e.printStackTrace();
		}
	}


	/***
	 * Method to Alter Today's date to specified date
	 * 
	 * @param : Element Name
	 * @return :
	 * Modified By :
	 ***/
	public Date getAlteredDate (Integer NoOfDays) {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, NoOfDays);
		return cal.getTime();
	}

	/***
	 * Method to get current time in minutes
	 * @param : Element Name
	 * @return :
	 * Modified By :
	 ***/
	public int getCurrentTimeInMin () {
		String time=new SimpleDateFormat("HH:mm").format(new Date());
		String[] splitTime=time.split(":");
		int hr=Integer.parseInt(splitTime[0]);
		int mn=Integer.parseInt(splitTime[1].substring(0,2));
		if(hr>12){
			hr=hr-12;
		}
		int timStamp=(hr*60)+mn;
		return timStamp;
	}

	/***
	 * Method to get current time in minutes
	 * @param : Element Name
	 * @return :
	 * Modified By :
	 ***/
	public int getTimeInMin (String time) {
		//String time=new SimpleDateFormat("HH:mm").format(new Date());
		String[] splitTime=time.split(":");
		int hr=Integer.parseInt(splitTime[0]);
		int mn=Integer.parseInt(splitTime[1].substring(0,2));
		if(hr>12){
			hr=hr-12;
		}
		int timStamp=(hr*60)+mn;
		return timStamp;
	}

	/***
	 * Method to get current time in minutes
	 * @param : Element Name
	 * @return :
	 * Modified By :
	 ***/
	public String getTimeIntwelveHrFormat (String time) {
		//String time=new SimpleDateFormat("HH:mm").format(new Date());
		String[] splitTime=time.split(":");
		int hr=Integer.parseInt(splitTime[0]);
		int mn=Integer.parseInt(splitTime[1].substring(0,2));
		if(hr>12){
			hr=hr-12;
		}
		String timStamp=Integer.toString(hr)+":"+Integer.toString(mn);
		return timStamp;
	}


	/***
	 * Method to scroll (WebElement link)
	 * @param : Element Name
	 ***/

	public void scroll(WebElement link,int height,int width) {
		JavascriptExecutor js = (JavascriptExecutor)browser;
		//Ideally give (250,750)
		js.executeScript("javascript:window.scrollBy(height,width)", link);
	}

	public void scrollToElementandclick (WebElement we){
		Actions builder = new Actions(browser); 
		builder.moveToElement(we).click().perform();
		((JavascriptExecutor) browser).executeScript("arguments[0].scrollIntoView(true);",we);
	}



	/***
	 * Method to check for an alert for 5 seconds
	 * @param       : Element Name
	 * @return      : 
	 * Modified By  :  
	 ***/

	public boolean isAlertPresent(){
		try{
			WebDriverWait wait = new WebDriverWait(browser, 5);
			wait.until(ExpectedConditions.alertIsPresent());
			return true;
		}catch(Exception e){			
			return false;
		}
	}


	/***
	 * Method to wait for the any of 2 elements to be displayed
	 * @param       : we1,we2
	 * @return      : 
	 * @author      : Prakash Shetty
	 * Modified By  :  
	 ***/


	public boolean waitForAnyElement(WebElement we1,WebElement we2){
		try{
			for(int i=0;i<60;i++){
				if(isElementPresent(we1)||isElementPresent(we2)){
					break;
				}else{
					sleep(1000);
				}
			}
			return true;
		}catch(Exception Ex){
			return false;
		}
	}
	
	/**
	 * method to make a thread sleep for customized time in milliseconds
	 * @param milliseconds
	 */
	protected void sleep(int milliseconds){
		 try {
			Thread.sleep(milliseconds);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/***
	 * Method to wait for the any of 2 elements to be displayed
	 * @param       : we1,we2
	 * @return      : 
	 * @author      : Prakash Shetty
	 * Modified By  :  
	 ***/


	public boolean waitForAnyElement(By we1,By we2){
		try{
			for(int i=0;i<80;i++){
				if(isElementPresent(we1)||isElementPresent(we2)){
					break;
				}else{
					sleep(1000);
				}
			}
			return true;
		}catch(Exception Ex){
			return false;
		}
	}


}
