package com.sun.utils;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.TestName;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.internal.ProfilesIni;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.safari.SafariDriver;

import com.sun.framework.ReportSettings;
import com.sun.framework.ReportThemeFactory;
import com.sun.framework.ReportThemeFactory.Theme;
import com.sun.framework.Status;


/**
 * Base class for all Sun Auto Test
 *
 */
public class SunAutoTest extends TestWatcher{
	private long startTime;
	private long endTime;
	private static String watchedLog;
	@Rule
	public TestName testName= new TestName();
	protected DataTable dataTable;
	protected SeleniumReport report;
	protected WebDriver browser;
	protected TestSettings settings;
	 @Rule
	  public TestWatcher watchman= new TestWatcher() {
		 
	      @Override
	      protected void failed(Throwable e, Description description) {
	    	  String reportPath=ReportPath.getInstance().getReportPath();
	    	  String testCaseQCName=testName.getMethodName();
	    	  //createResultFile(reportPath,"Failed");
	    	  //createZipFileOfReport(reportPath,testCaseQCName);	    	     	 
	         }
	      

	      @Override
	      protected void succeeded(Description description) {
	    	  String reportPath=ReportPath.getInstance().getReportPath();
	    	  String testCaseQCName=testName.getMethodName();
	    	  //createResultFile(reportPath,"Passed");
	    	  //createZipFileOfReport(reportPath,testCaseQCName);	    	  
	      }
	     };
	
	
	
	@Before
	public void setupData() {
		settings=new TestSettings();
		browser=getDriver(settings.getBrowser());
		String testCaseName=null;
		if(testName.getMethodName().contains("[")){
			testCaseName = testName.getMethodName().substring(0,testName.getMethodName().indexOf('['));
		}else{
			testCaseName = testName.getMethodName();
		}
		initializeReport(testCaseName);
		startTime = System.currentTimeMillis();
		try{
			dataTable = new DataTable(testCaseName);	
		}catch(Exception e){				
			report.updateTestLog("VerfiyTestDataRow", "Test Data Row Not Present 'Please check and add test data'",Status.FAIL);
			browser.quit();			
			System.out.println("Test Data Row not present. Please check-> "+e.getMessage());
		}				
	}

		
	/**
	 * Initialize Test Report
	 * @param testCaseName
	 */
	protected void initializeReport(String testCaseName) {
		String reportPath=ReportPath.getInstance().getReportPath();
		ReportSettings reportSettings = new ReportSettings(reportPath, testCaseName);
		reportSettings.generateExcelReports=false;
		reportSettings.generateHtmlReports=true;
		reportSettings.includeTestDataInReport=false;
		reportSettings.takeScreenshotFailedStep=true;
		reportSettings.takeScreenshotPassedStep=false;
		report = new SeleniumReport(reportSettings, ReportThemeFactory.getReportsTheme(Theme.CLASSIC));
		report.setDriver(browser);
		report.initializeReportTypes();
		report.initializeTestLog();
		report.addTestLogHeading(testCaseName);
		report.addTestLogSubHeading("Browser", settings.getBrowser(), "URL", settings.getApplicationURL());
		report.addTestLogTableHeadings();
		report.addTestLogSection("Detailed Steps");
	}

	
	@After
	public void tearDown(){
		endTime=System.currentTimeMillis();
		Long timeTaken=endTime-startTime-20;//-20 is to compensate for things other than test script execution
		int h = (int) ((timeTaken / 1000) / 3600);
		int m = (int) (((timeTaken / 1000) / 60) % 60);
		int s = (int) ((timeTaken / 1000) % 60);
		String time=""+h+":hh "+m+":mm"+s+"ss";
		report.addTestLogFooter(time);
	}
	
	/**
	 * Get the browser object specified in the property
	 * @param browserName
	 * @return
	 */
	protected WebDriver getDriver(String browserName) {
		WebDriver driver = null;
		if (browserName.equalsIgnoreCase("firefox")) {
			
			ProfilesIni profilesIni = new ProfilesIni();

			FirefoxProfile profile = profilesIni.getProfile("default");

			profile.setEnableNativeEvents(true);

			driver = new FirefoxDriver(profile);

		}
		if(browserName.equalsIgnoreCase("chrome")){
			System.setProperty("webdriver.chrome.driver", 
					TestUtils.getRelativePath()+"/ExternalLibraries/BrowserSpecificDrivers/chromedriver.exe");
									
					driver=new ChromeDriver();
		}
		if(browserName.equalsIgnoreCase("iexplore") || browserName.equalsIgnoreCase("ie")){
			System.setProperty("webdriver.ie.driver",
					TestUtils.getRelativePath()+"/ExternalLibraries/BrowserSpecificDrivers/IEDriverServer.exe");
			DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
			//capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS,true);
			capabilities.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION,true);

			capabilities.setCapability("ACCEPT_SSL_CERTS", true);
			driver=new InternetExplorerDriver(capabilities);
		
		}
		if(browserName.equalsIgnoreCase("safari")){			
			driver=new SafariDriver();
		}

		return driver;
	}
	
	public void reinitializeDriverForReport() {
    	browser=getDriver(settings.getBrowser()); 
    	report.setDriver(browser);  
    }
	
	
	public void createZipFileOfReport(String reportPath,String testCaseQCName){
		System.out.println(reportPath);
		File dir = new File(reportPath);

		try {
			System.out.println("Getting all files in "
					+ dir.getCanonicalPath()
					+ " including those in subdirectories");
			List<File> files = (List<File>) FileUtils.listFiles(
					dir, TrueFileFilter.INSTANCE,
					TrueFileFilter.INSTANCE);
			byte[] b;

			FileOutputStream fout = new FileOutputStream(reportPath+"\\"
					+ testCaseQCName + ".zip");
			ZipOutputStream zout = new ZipOutputStream(
					new BufferedOutputStream(fout));

			for (int i = 0; i < files.size(); i++) {
			if(files.get(i).getName().contains(testCaseQCName)){
				b = new byte[1024];
				FileInputStream fin = new FileInputStream(
						files.get(i));
				zout.putNextEntry(new ZipEntry(files.get(i)
						.getName()));
				int length;
				while (((length = fin.read(b, 0, 1024))) > 0) {
					zout.write(b, 0, length);
				}
				zout.closeEntry();
				fin.close();	
			}
				
			}
			zout.close();

		} catch (Exception e) {
			System.out.println("Exception caught");
		}
	}
	
	
	
	public void createResultFile(String reportPath,String runStatus){
		BufferedWriter writer = null;
		try
		{
		    writer = new BufferedWriter( new FileWriter(reportPath+"\\result.txt"));
		    writer.write(runStatus);

		}
		catch ( IOException e)
		{
		}
		finally
		{
		    try
		    {
		        if ( writer != null)
		        writer.close( );
		    }
		    catch ( IOException e)
		    {
		    }
		}
	}
	
	public String getMemoryUsedByApplication(String strAppl) throws IOException{
		Process p = Runtime.getRuntime().exec("tasklist");
		BufferedReader reader = new BufferedReader(new InputStreamReader(
				p.getInputStream()));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.contains(strAppl)) {
				break;
			}
		}
		return line;
	}
	
	 
}
